import socket
import signal
import sys

def signal_handler(sig, frame):
    print('Cerrando el servidor...')
    sys.exit(0)

def start_server():
    host = ''  # Dirección IP del servidor
    port = 5050  # Puerto a utilizar

    # Crear un socket TCP/IP
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Enlazar el socket al host y puerto
    server_socket.bind((host, port))

    # Escuchar conexiones entrantes
    server_socket.listen(1)
    print(f"Servidor escuchando en el puerto {port}...")

    signal.signal(signal.SIGINT, signal_handler)  # Manejar la señal SIGINT (Ctrl+C)

    try:
        while True:
            # Esperar una conexión
            client_socket, client_address = server_socket.accept()

            try:
                print(f"Conexión establecida desde {client_address[0]}:{client_address[1]}")

                # Recibir datos del cliente
                data = client_socket.recv(1024)
                data = data.decode('utf-8')

                if data:
                    print(f"Mensaje recibido: {data}")

                    # Guardar los datos en el archivo captura.txt
                    with open("captura.txt", "a") as file:
                        file.write("Conexión establecida desde: " + str(client_address[0]) + ":" + str(client_address[1]) + "\n")
                        file.write("Mensaje: " + data + "\n")
                        file.write("Host: " + socket.gethostname() + "\n")
                        file.write("--------------------------------------\n")

                    print("Datos guardados en captura.txt")

                    # Responder al cliente
                    response = "Mensaje recibido por el servidor"
                    client_socket.sendall(response.encode('utf-8'))
                else:
                    print("No se recibieron datos del cliente.")

            finally:
                # Cerrar la conexión
                client_socket.close()

    except KeyboardInterrupt:
        print('Cerrando el servidor...')
        server_socket.close()
        sys.exit(0)

if __name__ == '__main__':
    start_server()
